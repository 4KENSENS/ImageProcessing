import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYSplineRenderer;

public class Main {
    public static void main(String[] args) {
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Image Files", "jpg", "png", "gif");
        fileChooser.setFileFilter(filter);

        int result = fileChooser.showOpenDialog(null);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            String absolutePath = selectedFile.getAbsolutePath();

            try {
                BufferedImage image = ImageIO.read(selectedFile);
                int width = image.getWidth();
                int height = image.getHeight();

                // Resmi OTSU metoduyla siyah beyaz yapın
                for (int y = 0; y < height; y++) {
                    for (int x = 0; x < width; x++) {
                        int pixelColor = image.getRGB(x, y);
                        int red = (pixelColor >> 16) & 0xff;
                        int green = (pixelColor >> 8) & 0xff;
                        int blue = pixelColor & 0xff;

                        // Gri tonlamayı hesaplayın
                        int gray = (red + green + blue) / 3;

                        // OTSU eşikleme yöntemini uygulayın
                        int threshold = 128; // Başlangıç için varsayılan bir eşik değeri
                        if (gray > threshold) {
                            image.setRGB(x, y, 0xFFFFFF); // Beyaz
                        } else {
                            image.setRGB(x, y, 0x000000); // Siyah
                        }
                    }
                }

                // Yatay beyaz tonlama değerlerinin toplamını hesaplamak için bir dizi oluşturun
                int[][] data = new int[height][width];

                for (int y = 0; y < height; y++) {
                    for (int x = 0; x < width; x++) {
                        int pixelColor = image.getRGB(x, y);
                        int red = (pixelColor >> 16) & 0xff;
                        int green = (pixelColor >> 8) & 0xff;
                        int blue = pixelColor & 0xff;

                        // Beyaz tonlamayı hesaplayın ve 'data' dizisine kaydedin
                        int whiteTone = (red + green + blue) / 3;
                        data[y][x] = whiteTone;
                    }
                }

                DefaultXYDataset dataset = new DefaultXYDataset();
                double[][] seriesData = new double[2][width];

                // 'data' dizisini veri kümesine ekleyin
                for (int x = 0; x < width; x++) {
                    double sum = 0;
                    for (int y = 0; y < height; y++) {
                        sum += data[y][x];
                    }
                    double average = sum / height;
                    seriesData[0][x] = x;
                    seriesData[1][x] = average;
                }

                dataset.addSeries("Data", seriesData);

                // Çizgi grafiğini oluşturun
                org.jfree.chart.JFreeChart chart = ChartFactory.createXYLineChart(
                        "White Tones Average", "X Axis", "White Tone Average", dataset,
                        PlotOrientation.VERTICAL, true, true, false);

                XYPlot plot = chart.getXYPlot();
                XYSplineRenderer renderer = new XYSplineRenderer();
                plot.setRenderer(renderer);

                // Grafiği göster
                ChartFrame frame = new ChartFrame("Chart", chart);
                frame.pack();
                frame.setVisible(true);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}
