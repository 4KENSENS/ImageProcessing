import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

import javax.swing.*;
import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

public class Main {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }

    private static void createAndShowGUI() {
        JFrame frame = new JFrame("Grayscale and Otsu Thresholding");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new BorderLayout());
        frame.setSize(800, 600);

        final JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());

        final JLabel imageLabel = new JLabel();

        JButton openButton = new JButton("Open Image");
        openButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JFileChooser fileChooser = new JFileChooser();
                int returnValue = fileChooser.showOpenDialog(null);

                if (returnValue == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = fileChooser.getSelectedFile();
                    try {
                        BufferedImage originalImage = ImageIO.read(selectedFile);
                        BufferedImage grayscaleImage = convertToGrayscale(originalImage);
                        ImageIcon icon = new ImageIcon(grayscaleImage);
                        imageLabel.setIcon(icon);

                        // Show Otsu thresholded black-and-white image in a separate window
                        BufferedImage thresholdedImage = applyOtsuThreshold(grayscaleImage);
                        showBlackAndWhiteImage(thresholdedImage);

                        // Show histogram of the horizontal total grayscale values of the Otsu thresholded image in a separate window
                        showHorizontalTotalHistogram(thresholdedImage);

                        mainPanel.revalidate();
                        mainPanel.repaint();
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "Error while reading the image file!", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        });

        mainPanel.add(openButton, BorderLayout.NORTH);
        mainPanel.add(imageLabel, BorderLayout.CENTER);

        frame.add(mainPanel);
        frame.setVisible(true);
    }

    private static void showBlackAndWhiteImage(BufferedImage image) {
        // Save the Otsu thresholded black-and-white image to a file
        try {
            File outputFile = new File("OtsuThresholdedImage.png");
            ImageIO.write(image, "png", outputFile);
            System.out.println("Otsu thresholded image saved successfully.");
        } catch (IOException ex) {
            System.err.println("Error while saving the Otsu thresholded image.");
            ex.printStackTrace();
        }
    }


    private static BufferedImage applyOtsuThreshold(BufferedImage grayscaleImage) {
        // Otsu eşikleme işlemi burada yapılır
        int width = grayscaleImage.getWidth();
        int height = grayscaleImage.getHeight();
        int totalPixels = width * height;

        int[] histogram = new int[256];
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                int pixel = grayscaleImage.getRGB(x, y) & 0xFF;
                histogram[pixel]++;
            }
        }

        double[] probabilities = new double[256];
        for (int i = 0; i < 256; i++) {
            probabilities[i] = (double) histogram[i] / totalPixels;
        }

        double maxVariance = -1;
        int threshold = 0;

        for (int t = 0; t < 256; t++) {
            double wBackground = 0;
            double wForeground = 0;
            double sumBackground = 0;
            double sumForeground = 0;

            for (int i = 0; i < 256; i++) {
                if (i < t) {
                    wBackground += probabilities[i];
                    sumBackground += i * probabilities[i];
                } else {
                    wForeground += probabilities[i];
                    sumForeground += i * probabilities[i];
                }
            }

            double meanBackground = sumBackground / wBackground;
            double meanForeground = sumForeground / wForeground;

            double variance = wBackground * wForeground * Math.pow(meanBackground - meanForeground, 2);
            if (variance > maxVariance) {
                maxVariance = variance;
                threshold = t;
            }
        }

        double coefficient = 1.1;
        int adjustedThreshold = (int) (threshold * coefficient);

        // Eğer eşik değeri 255'i aşarsa, 255 olarak ayarlayalım.
        adjustedThreshold = Math.min(adjustedThreshold, 255);

        BufferedImage thresholdedImage = new BufferedImage(width, height, BufferedImage.TYPE_BYTE_BINARY);
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                int pixel = grayscaleImage.getRGB(x, y) & 0xFF;
                if (pixel < adjustedThreshold) {
                    thresholdedImage.setRGB(x, y, Color.BLACK.getRGB());
                } else {
                    thresholdedImage.setRGB(x, y, Color.WHITE.getRGB());
                }
            }
        }

        return thresholdedImage;
    }

    private static void showHorizontalTotalHistogram(BufferedImage thresholdedImage) {
        JFrame histogramFrame = new JFrame("Horizontal Total Grayscale Histogram");
        histogramFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        histogramFrame.setSize(thresholdedImage.getWidth(), thresholdedImage.getHeight());

        int width = thresholdedImage.getWidth();
        int height = thresholdedImage.getHeight();
        int[] horizontalTotals = new int[height]; // Yataydaki toplam grayscale değerlerini saklamak için dizi

        // Calculate horizontal totals
        for (int y = 0; y < height; y++) {
            int horizontalTotal = 0;
            for (int x = 0; x < width; x++) {
                int pixel = thresholdedImage.getRGB(x, y) & 0xFF;
                horizontalTotal += pixel;
            }
            horizontalTotals[y] = horizontalTotal;
        }

        DefaultCategoryDataset dataset = createHorizontalTotalDataset(horizontalTotals);
        JFreeChart chart = createHistogramChart(dataset, "Horizontal Total Grayscale Histogram", "Satır", "Toplam Grayscale Değeri");
        ChartPanel chartPanel = new ChartPanel(chart);

        histogramFrame.add(chartPanel, BorderLayout.CENTER);
        histogramFrame.setVisible(true);
    }


    private static DefaultCategoryDataset createHorizontalTotalDataset(int[] horizontalTotals) {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (int y = 0; y < horizontalTotals.length; y++) {
            dataset.addValue(horizontalTotals[y], "Toplam Grayscale Değeri", String.valueOf(y));
        }
        return dataset;
    }

    private static JFreeChart createHistogramChart(DefaultCategoryDataset dataset, String title, String xAxisLabel, String yAxisLabel) {
        JFreeChart chart = ChartFactory.createLineChart(
                title,
                xAxisLabel,
                yAxisLabel,
                dataset,
                PlotOrientation.VERTICAL,
                false,
                true,
                false
        );

        return chart;
    }

    private static BufferedImage convertToGrayscale(BufferedImage originalImage) {
        int width = originalImage.getWidth();
        int height = originalImage.getHeight();

        BufferedImage grayscaleImage = new BufferedImage(width, height, BufferedImage.TYPE_BYTE_GRAY);
        Graphics g = grayscaleImage.getGraphics();
        g.drawImage(originalImage, 0, 0, null);
        g.dispose();

        return grayscaleImage;
    }

}
